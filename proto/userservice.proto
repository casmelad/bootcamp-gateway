syntax = "proto3";

package users;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/descriptor.proto";
import "proto/validate/validate.proto";

option go_package="github.com/casmelad/bootcamp-gateway;users";


// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      version: "1.0";
    };
    external_docs: {
      url: "https://github.com/casmelad/LearningGo-Gateway";
      description: "gRPC-gateway: Go Training";
    }
    schemes: HTTP;
  };

message User{
    //The user id to update
    int32 id = 1 [json_name = "id",(google.api.field_behavior) = OUTPUT_ONLY];     
    //The user email
    string email=3 [json_name = "email",(google.api.field_behavior) = REQUIRED,(validate.rules).string.email = true];
    //The user name
    string name =5 [json_name = "name",(google.api.field_behavior) = REQUIRED];
    //The user last name
    string last_name = 7 [json_name = "last_name",(google.api.field_behavior) = OPTIONAL];
}

message CreateRequest{
   //The user email
   string email=3 [json_name = "email",(google.api.field_behavior) = REQUIRED,(validate.rules).string.email = true];
   //The user name
   string name =5 [json_name = "name", (google.api.field_behavior) = REQUIRED];
   //The user last name
   string last_name = 7 [json_name = "last_name",(google.api.field_behavior) = OPTIONAL];
}

message UpdateRequest{
    User user = 1 [json_name = "user"] ;
}

message GetAllUsersRequest{}

message DeleteRequest{
    int32 id = 1 [json_name = "id",(google.api.field_behavior) = REQUIRED];
}

message GetUserRequest{
 string email=1 [json_name = "value", (google.api.field_behavior) = REQUIRED];
}

message CreateResponse{
    
    //The status code of the response
    CodeResult code=1;
    //The user created
    int32 user_id = 3 [json_name = "user_id"] ;
}

message UpdateResponse{   
    //The status code of the response
    CodeResult code=1;    
}

message GetAllUsersResponse{
    repeated User users =1 [json_name = "users"];
}

message GetUserResponse{
    User user =1 [json_name = "user"];
}

message DeleteResponse{   
    //The status code of the response
    CodeResult code=1 [json_name = "code"];
}

enum CodeResult {
    UNKNOW = 0;
    OK=1;
    NOTFOUND=3;
    FAILED = 5;
    INVALIDINPUT = 7;
}


service Users{ //UsersService
    //Get a user by the email
    rpc GetUser(GetUserRequest) returns (User){
        option (google.api.http) = {
            get:  "/api/v1/users/{email}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Gets a user"
            description: "Gets a user based on its email"
            tags: "Users"
          };
    }

    //Creates a nw user record
    rpc Create(CreateRequest) returns (CreateResponse){
        option (google.api.http) = {
            post:  "/api/v1/users"
            body:  "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Adds a user"
            description: "Add a user to the server."
            tags: "Users"
          };
    }

    //Gets all users
    rpc GetAllUsers(GetAllUsersRequest) returns (stream User){
        option (google.api.http) = {
            get:  "/api/v1/users"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List all users"
            description: "List all users on the server."
            tags: "Users"
          };
    }

    //Updates the user information
    rpc Update(UpdateRequest) returns (UpdateResponse){
        option (google.api.http) = {
            // Route to this method from PATCH requests to /api/v1/users/{user.id}
            put: "/api/v1/users/{user.id}"
            body: "user"
          };
          option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update a user"
            description: "Modifies the user information."
            tags: "Users"
          };
    }

    //Deletes a user
    rpc Delete(DeleteRequest) returns (DeleteResponse){
        option (google.api.http) = {
            delete:  "/api/v1/users/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Deletes a user"
            description: "Deletes the user from the server"
            tags: "Users"
          };
    }
}

